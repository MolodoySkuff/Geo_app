import os, json, asyncio, logging
from dotenv import load_dotenv
from shapely.geometry import shape
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web 

from . import states
from .services import geocoding, osm, dem, metrics, pdf, map_render
from .storage.cache import ensure_dirs
from .providers.external import get_geometry_by_cadnum

load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PORT = int(os.getenv("PORT", "8080"))

def _default_replit_url():
    slug = os.getenv("REPL_SLUG")
    owner = os.getenv("REPL_OWNER")
    if slug and owner:
        return f"https://{slug}.{owner}.repl.co/"
    return ""

WEBAPP_URL = os.getenv("WEBAPP_URL", _default_replit_url()).strip()

async def start_web():
    app = web.Application()
    # –Ø–≤–Ω–æ –æ—Ç–¥–∞—ë–º index.html –Ω–∞ /
    async def index(request):
        return web.FileResponse(path="webapp/index.html")
    app.router.add_get("/", index)
    # –°—Ç–∞—Ç–∏–∫–∞ (css/js) ‚Äî –ø–æ —Ç–µ–º –∂–µ –ø—É—Ç—è–º
    app.router.add_static("/", path="webapp", show_index=False)
    # Health
    app.router.add_get("/health", lambda request: web.Response(text="ok"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()


bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)
ensure_dirs()

async def start_web():
    app = web.Application()
    # –û—Ç–¥–∞—ë–º –ø–∞–ø–∫—É webapp –Ω–∞ –∫–æ—Ä–Ω–µ /
    app.add_routes([
        web.get("/health", lambda request: web.Response(text="ok")),
        web.static("/", path="webapp", show_index=True),
    ])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    logging.info(f"Web server started on https port {PORT} (Replit will expose HTTPS)")

def main_keyboard() -> InlineKeyboardMarkup:
    rows = []
    if WEBAPP_URL.startswith("https://"):
        rows.append([
            InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL)),
            InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å GeoJSON/KML", callback_data="upload_help"),
        ])
    else:
        rows.append([InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å GeoJSON/KML", callback_data="upload_help")])
    rows.append([
        InlineKeyboardButton(text="üìç –¢–æ—á–∫–∞ + –ø–ª–æ—â–∞–¥—å", callback_data="point_area"),
        InlineKeyboardButton(text="üîé –ö–ù ‚Üí –∫–æ–Ω—Ç—É—Ä", callback_data="cadnum"),
    ])
    rows.append([InlineKeyboardButton(text="üìä –ö–æ–º–ø–∞—Ä–∞—Ç–∏–≤—ã", callback_data="comps")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.message(lambda m: getattr(m, "web_app_data", None) is not None)
async def webapp_data_fallback(m: types.Message):
    try:
        raw = m.web_app_data.data
        logging.info("Got WEB_APP_DATA: %s bytes", len(raw))
        payload = json.loads(raw)
        if "type" in payload and payload["type"] == "Feature" and "geometry" in payload:
            g = shape(payload["geometry"])
        elif "type" in payload and payload["type"] in ("Polygon", "MultiPolygon"):
            g = shape(payload)
        else:
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è GeoJSON Feature/Polygon")
        await run_pipeline_and_reply(m, g, source="webapp")
    except Exception as e:
        logging.exception("WEB_APP_DATA error")
        await m.answer(f"–û—à–∏–±–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.message(CommandStart())
@router.message(Command("help"))
async def cmd_start(m: types.Message):
    hint = "" if WEBAPP_URL.startswith("https://") else "–ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–∞ ‚Äî –Ω—É–∂–µ–Ω HTTPS.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–¢–æ—á–∫–∞ + –ø–ª–æ—â–∞–¥—å¬ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ GeoJSON/KML."
    await m.answer(
        "–ì–µ–æ‚Äë—Å–∫–æ—Ä–∏–Ω–≥ —É—á–∞—Å—Ç–∫–æ–≤: –Ω–∞—Ä–∏—Å—É–π—Ç–µ –ø–æ–ª–∏–≥–æ–Ω –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ GeoJSON/KML. "
        "–ü–æ–¥—Ç—è–Ω–µ–º OSM/DEM, –ø–æ—Å—á–∏—Ç–∞–µ–º —É–∫–ª–æ–Ω, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –±–ª–∏–∑–æ—Å—Ç—å –∫ –≤–æ–¥–µ/–¥–æ—Ä–æ–≥–∞–º –∏ —Å–¥–µ–ª–∞–µ–º PDF.\n" + hint,
        reply_markup=main_keyboard()
    )

@router.callback_query(F.data == "upload_help")
async def upload_help(c: types.CallbackQuery):
    await c.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª .geojson –∏–ª–∏ .kml –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ.")
    await c.answer()

@router.callback_query(F.data == "point_area")
async def point_area_start(c: types.CallbackQuery, state: FSMContext):
    await state.set_state(states.PointArea.waiting_location)
    await c.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üìç (–∫–Ω–æ–ø–∫–æ–π –≤ —á–∞—Ç–µ).")
    await c.answer()

@router.message(StateFilter(states.PointArea.waiting_location), F.location)
async def point_area_loc(m: types.Message, state: FSMContext):
    await state.update_data(lat=m.location.latitude, lon=m.location.longitude)
    await state.set_state(states.PointArea.waiting_area)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –ø–ª–æ—â–∞–¥—å –≤ —Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).")

@router.message(StateFilter(states.PointArea.waiting_area))
async def point_area_area(m: types.Message, state: FSMContext):
    try:
        area_sot = float(m.text.replace(",", "."))
        data = await state.get_data()
        lat, lon = data["lat"], data["lon"]
        poly = metrics.square_from_point_area(lat, lon, area_sot)
        await state.clear()
        await run_pipeline_and_reply(m, poly, source="point+area")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /start")
        await state.clear()

@router.callback_query(F.data == "cadnum")
async def cadnum_start(c: types.CallbackQuery, state: FSMContext):
    await state.set_state(states.Cadnum.waiting_text)
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä (—Ñ–æ—Ä–º–∞—Ç 77:XX:XXXXXXX:XXX)")
    await c.answer()

@router.message(StateFilter(states.Cadnum.waiting_text))
async def cadnum_handle(m: types.Message, state: FSMContext):
    cad = m.text.strip()
    geom = None
    provider_enabled = os.getenv("EXTERNAL_GEOM_PROVIDER", "off").strip().lower() in ("on", "1", "true", "yes")
    if provider_enabled:
        try:
            geom = await asyncio.to_thread(get_geometry_by_cadnum, cad)
        except Exception as e:
            await m.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ö–ù‚Üí–∫–æ–Ω—Ç—É—Ä: {e}")
    if not geom:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ö–ù‚Üí–∫–æ–Ω—Ç—É—Ä. –ù–∞—Ä–∏—Å—É–π—Ç–µ —É—á–∞—Å—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ GeoJSON.")
    else:
        await run_pipeline_and_reply(m, geom, source=f"cadnum:{cad}")
    await state.clear()

@router.message(F.document)
async def doc_handler(m: types.Message):
    doc = m.document
    dest_dir = "cache/uploads"
    os.makedirs(dest_dir, exist_ok=True)
    filename = f"{doc.file_id}_{doc.file_name or 'upload'}"
    path = os.path.join(dest_dir, filename)
    try:
        await bot.download(doc, destination=path)
        poly = metrics.read_polygon_from_file(path)
        await run_pipeline_and_reply(m, poly, source=os.path.basename(path))
    except Exception as e:
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {e}")

@router.message(F.web_app_data)
async def webapp_data(m: types.Message):
    try:
        payload = json.loads(m.web_app_data.data)
        if "type" in payload and payload["type"] == "Feature" and "geometry" in payload:
            g = shape(payload["geometry"])
        elif "type" in payload and payload["type"] in ("Polygon", "MultiPolygon"):
            g = shape(payload)
        else:
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è GeoJSON Feature/Polygon")
        await run_pipeline_and_reply(m, g, source="webapp")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.callback_query(F.data == "comps")
async def comps_start(c: types.CallbackQuery, state: FSMContext):
    await state.set_state(states.Comps.collecting)
    await c.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ 2‚Äì5 —Å—Ç—Ä–æ–∫:\n–ø–ª–æ—â–∞–¥—å_—Å–æ—Ç–æ–∫; —Ü–µ–Ω–∞_‚ÇΩ; —Å—Å—ã–ª–∫–∞(–æ–ø—Ü.)\n–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ ‚Äî /done")
    await c.answer()

@router.message(StateFilter(states.Comps.collecting), Command("done"))
async def comps_done(m: types.Message, state: FSMContext):
    data = await state.get_data()
    rows = data.get("rows", [])
    if len(rows) < 2:
        await m.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ä–∞–≤–Ω–∏–º—ã—Ö.")
        return
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∏–ª–∫–∞
    pps = sorted([r["pp_sot"] for r in rows if r.get("pp_sot")])
    mid = pps[len(pps)//2] if pps else None
    if mid:
        await m.answer(f"–û—Ü–µ–Ω–∫–∞ –ø–æ –∫–æ–º–ø–∞—Ä–∞—Ç–∏–≤–∞–º (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ —Å–æ—Ç–∫—É): ~{int(mid):,} ‚ÇΩ/—Å–æ—Ç.".replace(",", " "))
    await m.answer("–ì–æ—Ç–æ–≤–æ. –í PDF –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞–∑–¥–µ–ª ‚Äú–ö–æ–º–ø–∞—Ä–∞—Ç–∏–≤—ã‚Äù (–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏).")
    await state.clear()

@router.message(StateFilter(states.Comps.collecting))
async def comps_collect(m: types.Message, state: FSMContext):
    txt = m.text.strip()
    parts = [p.strip() for p in txt.split(";")]
    try:
        area_sot = float(parts[0].replace(",", ".").replace(" ", ""))
        price = float(parts[1].replace(" ", ""))
        link = parts[2] if len(parts) > 2 else ""
    except Exception:
        await m.answer("–§–æ—Ä–º–∞—Ç: –ø–ª–æ—â–∞–¥—å_—Å–æ—Ç–æ–∫; —Ü–µ–Ω–∞_‚ÇΩ; —Å—Å—ã–ª–∫–∞(–æ–ø—Ü.)")
        return
    rows = (await state.get_data()).get("rows", [])
    rows.append({"area_sot": area_sot, "price": price, "link": link, "pp_sot": price / max(area_sot, 0.0001)})
    await state.update_data(rows=rows)
    await m.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –°–µ–π—á–∞—Å {len(rows)} –∑–∞–ø–∏—Å–µ–π. /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

@router.message(Command("debug"))
async def debug(m: types.Message):
    wa = getattr(m, "web_app_data", None)
    await m.answer(f"WEBAPP_URL={os.getenv('WEBAPP_URL')}\n"
                   f"Has web_app_data in last msg? {'yes' if wa else 'no'}")
async def run_pipeline_and_reply(m: types.Message, geom_wgs84, source: str = ""):
    await m.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–æ–∫‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç ~5‚Äì20 —Å–µ–∫—É–Ω–¥.")

    
    # 1) –ê–¥—Ä–µ—Å
    centroid = geom_wgs84.centroid
    addr = await asyncio.to_thread(geocoding.reverse_geocode, centroid.y, centroid.x)
    # 2) OSM –ø–æ bbox
    bbox = metrics.expand_bbox(geom_wgs84.bounds, meters=2000)
    osm_data = await asyncio.to_thread(osm.fetch_overpass, bbox)
    # 3) DEM/—É–∫–ª–æ–Ω
    dem_stats = await asyncio.to_thread(dem.compute_dem_stats, geom_wgs84)
    # 4) –ú–µ—Ç—Ä–∏–∫–∏
    metric_set = await asyncio.to_thread(metrics.compute_all, geom_wgs84, osm_data, dem_stats)
    # 5) –°—Ç–∞—Ç–∏—á–Ω–∞—è –∫–∞—Ä—Ç–∞
    map_path = await asyncio.to_thread(map_render.render_static_map, geom_wgs84, osm_data, "cache/maps")
    # 6) PDF
    pdf_path = await asyncio.to_thread(pdf.render_report, metric_set, addr, source, map_path)
    text = metrics.format_brief(metric_set, addr)
    await m.answer_photo(photo=FSInputFile(map_path), caption=text)
    if pdf_path and os.path.exists(pdf_path):
        await m.answer_document(document=FSInputFile(pdf_path))

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω")
    await start_web()          # –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())